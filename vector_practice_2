#include <iostream>
#include <fstream>
#include <sstream>
#include <string>
#include <cmath>
#include <vector>
using namespace std;

const int rows = 200;
const int cols = 200;
int skeleton[rows][cols];
bool visited[rows][cols];

void dfs(int row, int col, int distance) {
    if (visited[row][col]) {
        return;
    }
    visited[row][col] = true;

    // Check if current pixel is a branch point
    int num_neighbors = 0;
    for (int i = row - 1; i <= row + 1; i++) {
        for (int j = col - 1; j <= col + 1; j++) {
            if (i >= 0 && i < rows && j >= 0 && j < cols) {
                if (skeleton[i][j] == 1 && !(i == row && j == col)) {
                    num_neighbors++;
                }
            }
        }
    }
    if (num_neighbors > 2) { // current pixel is a branch point
        // Change pixel values of all skeletal pixels within 15 pixels away from current pixel
        for (int i = row - 15; i <= row + 15; i++) {
            for (int j = col - 15; j <= col + 15; j++) {
                if (i >= 0 && i < rows && j >= 0 && j < cols) {
                    int dist = (i - row) * (i - row) + (j - col) * (j - col); // squared Euclidean distance
                    if (skeleton[i][j] == 1 && dist > 0 and dist <= 450) { // 15^2 = 225
                        skeleton[i][j] = 255; // Change pixel value to 255
                    }
                    else if (skeleton[i][j] == 1 && dist == 0) { // 15^2 = 225
                        skeleton[i][j] = 128; // Change pixel value to 255
                    }
                }
            }
        }
    }

    // Recursively check all unvisited neighboring pixels
    for (int i = row - 1; i <= row + 1; i++) {
        for (int j = col - 1; j <= col + 1; j++) {
            if (i >= 0 && i < rows && j >= 0 && j < cols) {
                if (skeleton[i][j] == 1 && !(i == row && j == col) && !visited[i][j]) {
                    dfs(i, j, distance + 1);
                }
            }
        }
    }
}

int main() {
    // Read in skeleton matrix from CSV file
    ifstream inputfile("skeleton.csv");
    for (int i = 0; i < 200; i++) {
        string line;
        getline(inputfile, line);
        stringstream inputString(line);
        char delimiter;
        //delimiter 就是讀分隔號
        for (int j = 0; j < 200; j++) {
            inputString >> skeleton[i][j] >> delimiter;
        }
    }
    inputfile.close();

    // Perform DFS on all skeletal pixels
    for (int i = 0; i < rows; i++) {
        for (int j = 0; j < cols; j++) {
            if (skeleton[i][j] == 1 && !visited[i][j]) {
                dfs(i, j, 0);
            }
        }
    }

    // Write modified matrix to output CSV file
    ofstream outfile("modified_skeleton.csv");
    for (int i = 0; i < rows; i++) {
        for (int j = 0; j < cols; j++) {
            outfile << skeleton[i][j] << ",";
        }
        outfile << endl;
    }
    outfile.close();

    return 0;
}
