#include <iostream>
#include <fstream>
#include <sstream>
#include <cmath>
using namespace std;

class Tester {
public:
	int key = 0;
	double f1 = 0;
	double f2;
	double f3;
	double f4;
	double f5;
	double f6;
	double f7;
	int class_type;
};
//計算Gini值
/*class Denode {
	//閾值
	double wanted_value;
	int left[640];
	int right[640];

};*/
class DecisionNode {
public:
	int feature[640];    // 用哪個特徵分類
	double threshold;  // 分類閾值
	bool is_leaf;   // 是否為葉節點
	bool result;    // 葉節點的分類結果
	//數一下有幾個subject
	int right_n;
	int left_n;
	DecisionNode* left;   // 左子樹指針
	DecisionNode* right;  // 右子樹指針
};

// 創建一個新節點
DecisionNode* new_node(int feature[], double threshold, bool is_leaf, bool result) {
	DecisionNode* node = new DecisionNode();
	/*node->feature[] = feature;
	node->threshold = threshold;
	node->is_leaf = is_leaf;
	node->result = result;*/
	node->left = NULL;
	node->right = NULL;
	return node;
}
double Gini(int n1, int n1_c1, int n1_c2, int n2, int n2_c1, int n2_c2) {
	
	return ( 1 -(n1_c1 / n1) ^ 2 - (n1_c2 / n1) ^ 2) * n1/(n1+n2) + double( 1 - (n2_c1 / n2) ^ 2 - (n2_c2 / n2) ^ 2) * n2 / (n1 + n2);
}
/*double Gain(int n1, int n2, double g1, double g2) {

}*/


int main()
{
	int i = 0;
	int remb[500];
	//double dis[63][640];
	//int remn[63][640];
	Tester array[5000];
	double m1[640];
	double m2[640];
	double m3[640];
	double m4[640];
	double m5[640];
	double m6[640];
	double m7[640];
	int number[640];


	ifstream inputfile;
	//inputfile 是名稱
	inputfile.open("Estimated_Data_7features_final.csv");
	//line 是 string datatype
	string line = "";
	getline(inputfile, line); // 把第一行row吃掉
	while (getline(inputfile, line)) {

		int key;
		double f1;
		double f2;
		double f3;
		double f4;
		double f5;
		double f6;
		double f7;
		int class_type;
		string tempstring; //用來轉換 文字 to 數字
		string tem;
		stringstream inputString(line); //不知道這行意思
		// 要用單引號 因為CHAR

		getline(inputString, tem, ',');
		key = atoi(tem.c_str());
		array[i].key = key;
		getline(inputString, tem, ',');
		f1 = atof(tem.c_str());
		array[i].f1 = f1;
		getline(inputString, tem, ',');
		f2 = atof(tem.c_str());
		array[i].f2 = f2;
		getline(inputString, tem, ',');
		f3 = atof(tem.c_str());
		array[i].f3 = f3;
		getline(inputString, tem, ',');
		f4 = atof(tem.c_str());
		array[i].f4 = f4;
		getline(inputString, tem, ',');
		f5 = atof(tem.c_str());
		array[i].f5 = f5;
		getline(inputString, tem, ',');
		f6 = atof(tem.c_str());
		array[i].f6 = f6;
		getline(inputString, tem, ',');
		f7 = atof(tem.c_str());
		array[i].f7 = f7;
		getline(inputString, tem, ',');
		class_type = atoi(tem.c_str());
		array[i].class_type = class_type;
		i++;

	}
	/*for (int i = 0; i < 640; i++) {
		//cout << array[i].key << "\t" << array[i].f1 << endl;
		cout << i << "\t" << array[i].key << "\t" << array[i].f1 << "\t" << array[i].f2
			<< "\t" << array[i].f3 << "\t" << array[i].f4 << "\t" << array[i].f5
			<< "\t" << array[i].f6 << "\t" << array[i].f7 << "\t" << array[i].class_type << "\t" << endl;
	}*/
	for (int i = 0; i < 640; i++) {
		m1[i] = array[i].f1;
		m2[i] = array[i].f2;
		m3[i] = array[i].f3;
		m4[i] = array[i].f4;
		m5[i] = array[i].f5;
		m6[i] = array[i].f6;
		m7[i] = array[i].f7;
		number[i] = array[i].class_type;
	}
	//驗證
	/*for (int i = 0; i < 640; i++) {
		cout << i << "\t" << m1[i] << "\t" << m2[i] << "\t" << m3[i]
			<< "\t" << m4[i] << "\t" << m5[i] << "\t" << m6[i]
			<< "\t" << m7[i] << "\t" << number[i] << endl;
	}*/
	double remmin = 50;
	double now = 0;
	double remvalue = 0;
	/*for (int i = 0; i < 640; i++) {
		double thisvalue;
		int n1 = 0, n2 = 0;
		int n1_c1 = 0, n1_c2 = 0;
		int n2_c1 = 0, n2_c2 = 0;
		thisvalue = m1[i];
		for (int i = 0; i < 640; i++) {
			if (m1[i] >= thisvalue) {
				n1++;
				if (array[i].class_type == 0) {
					n1_c1++;
				}
				else {
					n1_c2++;
				}
			}
			else {
				n2++;
				if (array[i].class_type == 0) {
					n2_c1++;
				}
				else {
					n2_c2++;
				}
			}

		}
		cout << "用第i值當作標準" << i << "左邊有" << n1 << "(" << n1_c1 << "," << n1_c2 << ")"
									  << "右邊有" << n2 << "(" << n2_c1 << "," << n2_c2 << ")" << endl;
		//要找Gini最小值，Gain才會最大
		if (n1 == 0 or n2 == 0) {
			continue;
		}
		now = Gini(n1, n1_c1, n1_c2, n2, n2_c1, n2_c2);
		//cout << "這邊是" << now;
		if (now < remmin) {
			//記住GINI 值
			remmin = now;
			//記住閾值
			remvalue = thisvalue;
		}
	}*/
	//cout << remmin << "," << remvalue;
	for (int i = 0; i < 640; i++) {
		double thisvalue;
		int n1 = 0, n2 = 0;
		int n1_c1 = 0, n1_c2 = 0;
		int n2_c1 = 0, n2_c2 = 0;
		thisvalue = m1[i];
		for (int i = 0; i < 640; i++) {
			if (m1[i] >= thisvalue) {
				n1++;
				if (array[i].class_type == 0) {
					n1_c1++;
				}
				else {
					n1_c2++;
				}
			}
			else {
				n2++;
				if (array[i].class_type == 0) {
					n2_c1++;
				}
				else {
					n2_c2++;
				}
			}

		}
		cout << "用第i值當作標準" << i << "左邊有" << n1 << "(" << n1_c1 << "," << n1_c2 << ")"
			<< "右邊有" << n2 << "(" << n2_c1 << "," << n2_c2 << ")" << endl;
		//要找Gini最小值，Gain才會最大
		if (n1 == 0 or n2 == 0) {
			continue;
		}
		now = Gini(n1, n1_c1, n1_c2, n2, n2_c1, n2_c2);
		//cout << "這邊是" << now;
		if (now < remmin) {
			//記住GINI 值
			remmin = now;
			//記住閾值
			remvalue = thisvalue;
		}
	}
	cout << remmin << "," << remvalue;






}

https://www.geeksforgeeks.org/decision-tree/
