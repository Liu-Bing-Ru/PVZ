#include <iostream>
#include <fstream>
#include <sstream>
#include <cmath>
using namespace std;


class Tester {
public:
	int key;
	double f1;
	double f2;
	double f3;
	double f4;
	double f5;
	double f6;
	double f7;
	int class_type;
	int missing = 0;
	//記錄哪一筆資料是missing
	//有同時有兩筆是missing的
	//目前不需要檢查，因為沒有一把資料是與算出來平均值相同
	int number = 0;
};



int main()
{	//記住哪幾筆資料是-99
	int remb[500];
	double dis[63][640];
	int remn[63][640];
	double x;
	double x1, x2, x3, x4, x5, x6, x7;
	int i = 0;
	double mean_1 = 0;
	double mean_2 = 0;
	double mean_3 = 0;
	double mean_4 = 0;
	double mean_5 = 0;
	double mean_6 = 0;
	double mean_7 = 0;
	//計算個數
	int count_1 = 0;
	int count_2 = 0;
	int count_3 = 0;
	int count_4 = 0;
	int count_5 = 0;
	int count_6 = 0;
	int count_7 = 0;

	Tester array[5000];
	ifstream inputfile;
	//inputfile 是名稱
	inputfile.open("Missing_Data_7features.csv");
	//line 是 string datatype
	string line = "";
	getline(inputfile, line); // 把第一行row吃掉
	while (getline(inputfile, line)) {

		int key;
		double f1;
		double f2;
		double f3;
		double f4;
		double f5;
		double f6;
		double f7;
		int class_type;
		string tempstring; //用來轉換 文字 to 數字
		string tem;
		stringstream inputString(line); //不知道這行意思

		// 要用單引號 因為CHAR
		getline(inputString, tem, ',');
		key = atoi(tem.c_str());
		array[i].key = key;
		getline(inputString, tem, ',');
		f1 = atof(tem.c_str());
		array[i].f1 = f1;
		getline(inputString, tem, ',');
		f2 = atof(tem.c_str());
		array[i].f2 = f2;
		getline(inputString, tem, ',');
		f3 = atof(tem.c_str());
		array[i].f3 = f3;
		getline(inputString, tem, ',');
		f4 = atof(tem.c_str());
		array[i].f4 = f4;
		getline(inputString, tem, ',');
		f5 = atof(tem.c_str());
		array[i].f5 = f5;
		getline(inputString, tem, ',');
		f6 = atof(tem.c_str());
		array[i].f6 = f6;
		getline(inputString, tem, ',');
		f7 = atof(tem.c_str());
		array[i].f7 = f7;
		getline(inputString, tem, ',');
		class_type = atoi(tem.c_str());
		array[i].class_type = class_type;
		if (f1 == -99 or f2 == -99 or f3 == -99 or f4 == -99 or f5 == -99 or f6 == -99 or f7 == -99) {
			array[i].missing = 1;
		}
		i++;

	}
	int k = 0;
	for (int i = 0; i < 640; i++) {
		if (array[i].missing == 1) {
			remb[k] = i;
			k++;
			//k是總共有幾筆資料是missing data
		}
	}


	for (int i = 0; i < 640; i++) {
		//cout << array[i].key << "\t" << array[i].f1 << endl;
		cout << i << "\t" << array[i].key << "\t" << array[i].f1 << "\t" << array[i].f2
			 << "\t" << array[i].f3 << "\t" << array[i].f4 << "\t" << array[i].f5
		     << "\t" << array[i].f6 << "\t" << array[i].f7 << "\t" << array[i].class_type << "\t" << array[i].missing << endl;
	}
	for (int i = 0; i < 640; i++) {
		if (array[i].f1 != -99) {
			mean_1 += array[i].f1;
			count_1++;
		}
		if (array[i].f2 != -99) {
			mean_2 += array[i].f2;
			count_2++;
		}
		if (array[i].f3 != -99) {
			mean_3 += array[i].f3;
			count_3++;
		}
		if (array[i].f4 != -99) {
			mean_4 += array[i].f4;
			count_4++;
		}
		if (array[i].f5 != -99) {
			mean_5 += array[i].f5;
			count_5++;
		}
		if (array[i].f6 != -99) {
			mean_6 += array[i].f6;
			count_6++;
		}
		if (array[i].f7 != -99) {
			mean_7 += array[i].f7;
			count_7++;
		}

	}

	/*cout << count_1 << count_2 << count_3 << count_4 << count_5 << count_6 << count_7 << endl;

	cout << count_6 << endl;
	cout << mean_6 << endl;
	cout << mean_1 / count_1 << "\t" << mean_2 / count_2 << "\t" << mean_3 / count_3 << "\t"
		<< mean_4 / count_4 << "\t" << mean_5 / count_5 << "\t" << mean_6 / count_6 << "\t"
		<< mean_7 / count_7 << endl;*/

	double s1, s2, s3, s4, s5, s6, s7;
	s1 = mean_1 / count_1;
	s2 = mean_2 / count_2;
	s3 = mean_3 / count_3;
	s4 = mean_4 / count_4;
	s5 = mean_5 / count_5;
	s6 = mean_6 / count_6;
	s7 = mean_6 / count_7;
	for (int i = 0; i < 640; i++) {
		if (array[i].f1 == -99) {
			array[i].f1 = s1;
		}
		if (array[i].f2 == -99) {
			array[i].f2 = s2;
		}
		if (array[i].f3 == -99) {
			array[i].f3 = s3;
		}
		if (array[i].f4 == -99) {
			array[i].f4 = s4;
		}
		if (array[i].f5 == -99) {
			array[i].f5 = s5;
		}
		if (array[i].f6 == -99) {
			array[i].f6 = s6;
		}
		if (array[i].f7 == -99) {
			array[i].f7 = s7;
		}

	}
	//列印出改過的 -99 全部都改成平均
	/*for (int i = 0; i < 640; i++) {
		//cout << array[i].key << "\t" << array[i].f1 << endl;
		cout << i << "\t" << array[i].key << "\t" << array[i].f1 << "\t" << array[i].f2
			<< "\t" << array[i].f3 << "\t" << array[i].f4 << "\t" << array[i].f5
			<< "\t" << array[i].f6 << "\t" << array[i].f7 << "\t" << array[i].class_type << "\t" << array[i].missing << endl;
	}*/
	
	/*for (int i = 0; i < k; i++) {
		cout << remb[i] << ",";
	}
	cout << "這裡" << k << endl;
	*/
	/*
	我現在有 missing data 的下標， 然後我要找出最接近的25比資料取平均
	
	
	*/
	//int initG[63][639];
	for(int m = 0; m < k; m++) {
		for (int g = 0; g < 640; g++) {
			x = sqrt(pow(array[remb[m]].f1 - array[g].f1, 2) +
				pow(array[remb[m]].f2 - array[g].f2, 2) +
				pow(array[remb[m]].f3 - array[g].f3, 2) +
				pow(array[remb[m]].f4 - array[g].f4, 2) +
				pow(array[remb[m]].f5 - array[g].f5, 2) +
				pow(array[remb[m]].f6 - array[g].f6, 2) +
				pow(array[remb[m]].f7 - array[g].f7, 2));
			dis[m][g] = x;
		}
	}

	//印出所有的距離
	/*for (int m = 0; m < k; m++) {
		for (int g = 0; g < 640; g++) {
			//g就是原本陣列的下標
			cout << dis[m][g] <<",";
		}
		cout << endl;
	}*/
	//先重製一下remn
	for (int i = 0; i < 63; i++) {
		for (int j = 0; j < 640; j++) {
			remn[i][j] = j;
		}
	}
	/*for (int i = 0; i < 63; i++) {
		for (int j = 0; j < 640; j++) {
			cout << remn[i][j] << ",";
		}
		cout << endl;
	}*/

	/*泡沫排序法*/
	double rembig;
	int remmb;
	for (int m = 0; m < k; m++) {
		for (int k = 0; k < 639; k++) {
			for (int g = 0; g < 639; g++) {
				if (dis[m][g] > dis[m][g + 1]) {
					rembig = dis[m][g];
					remmb = remn[m][g];

					dis[m][g] = dis[m][g + 1];
					remn[m][g] = remn[m][g + 1];

					remn[m][g + 1] = remmb;
					dis[m][g + 1] = rembig;
				}
			}
		}
	}
	//第0筆都是自己，只要取第一筆到第25筆即可
	//也就是dis[0][1-25]
	for (int m = 0; m < 640; m++) {
		cout << remn[0][m] << "\t" << dis[0][m]<<endl;
	}
	//接下來是找平均
	//這邊出錯QQ
	for (int i = 0; i < 63; i++) {
		for (int j = 1; j < 26; j++) {
			//remn[i][j] 此為下標
			x1 += array[remn[i][j]].f1;
			x2 += array[remn[i][j]].f2;
			x3 += array[remn[i][j]].f3;
			x4 += array[remn[i][j]].f4;
			x5 += array[remn[i][j]].f5;
			x6 += array[remn[i][j]].f6;
			x7 += array[remn[i][j]].f7;
		}
		x1 = x1 / 25;
		x2 = x2 / 25;
		x3 = x3 / 25;
		x4 = x4 / 25;
		x5 = x5 / 25;
		x6 = x6 / 25;
		x7 = x7 / 25;
		if (array[remb[i]].f1 == s1) {
			array[remb[i]].f1 = x1;
		}
		if (array[remb[i]].f2 == s2) {
			array[remb[i]].f2 = x2;
		}
		if (array[remb[i]].f3 == s3) {
			array[remb[i]].f3 = x3;
		}
		if (array[remb[i]].f4 == s4) {
			array[remb[i]].f4 = x4;
		}
		if (array[remb[i]].f5 == s5) {
			array[remb[i]].f5 = x5;
		}
		if (array[remb[i]].f6 == s6) {
			array[remb[i]].f6 = x6;
		}
		if (array[remb[i]].f7 == s7) {
			array[remb[i]].f7 = x7;
		}
	}
	//驗證
	for (int i = 0; i < 640; i++) {
		//cout << array[i].key << "\t" << array[i].f1 << endl;
		cout << i << "\t" << array[i].key << "\t" << array[i].f1 << "\t" << array[i].f2
			<< "\t" << array[i].f3 << "\t" << array[i].f4 << "\t" << array[i].f5
			<< "\t" << array[i].f6 << "\t" << array[i].f7 << "\t" << array[i].class_type << "\t" << array[i].missing << endl;
	}


	//接下來是存檔





	return 0;

}

/*
remb[i] = >記住所有有missingnumber的下標


0,1,3,4,24,27,45,47,57,84,86,94,103,114,122,124,137,141,146,158,173,174,
183,184,194,211,212,222,228,236,257,262,267,286,287,288,290,307,313,358,
362,382,423,442,444,493,494,495,496,504,518,520,532,566,568,570,590,599,
601,603,607,617,624,
這裡63

共64筆

*/
